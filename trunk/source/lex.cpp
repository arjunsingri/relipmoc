#line 2 "lex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;
extern char yytext[];


static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + yy_more_offset >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[yy_more_offset], yytext_ptr, yyleng + 1 ); \
	yyleng += yy_more_offset; \
	yy_prev_more_offset = yy_more_offset; \
	yy_more_offset = 0; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 195
#define YY_END_OF_BUFFER 196
static yyconst short int yy_acclist[502] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,  196,  195,
        1,  195,  195,  195,  195,  195,  194,  195,  195,  195,
      192,  195,   25,  195,  195,  189,  195,  189,  195,  189,
      195,  189,  195,  189,  195,  189,  195,  189,  195,  189,
      195,  189,  195,  189,  195,  189,  195,  189,  195,  189,
      195,  189,  195,  189,  195,  189,  195,    1,   15,   26,
       26,   28,  192,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  187,  189,  187,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  189,   26,   26,  193,  193,  193,  193,
       28,   28,  119,  114,  120,  118,  115,  121,  116,  122,
      117,  123,  191,  100,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      127,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  187,  189,  186,  187,  189,  189,  189,  189,  189,
       32,  189,  189,   66,  189,   64,  189,   65,  189,  189,
      189,   36,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  193,   28,   28,  107,  106,  111,  108,  109,  112,
      110,  113,  104,  190,    3,   39,  189,   37,  189,   38,

      189,   63,  189,   61,  189,   62,  189,   31,  189,   33,
      189,   93,  189,   91,  189,   92,  189,   34,  189,   54,
      189,   52,  189,   53,  189,   47,  189,  183,  189,  149,
      189,  184,  189,  172,  189,  189,  131,  189,  135,  189,
      125,  189,  189,  129,  189,  128,  189,  130,  189,  126,
      189,  167,  189,  189,  143,  189,  145,  189,  142,  189,
      144,  189,  157,  189,  189,  185,  189,  189,  189,   50,
       51,  189,   48,  189,   49,  189,   98,  189,  189,   84,
      189,   82,  189,  189,   83,  189,  189,   44,  189,   43,
      189,   57,  189,   55,  189,   56,  189,   60,  189,   58,

      189,   59,  189,   30,  189,  189,   72,  189,   70,  189,
       71,  189,   78,  189,   76,  189,   77,  189,  188,  189,
       75,  189,   73,  189,   74,  189,   81,  189,   79,  189,
       80,  189,   42,  189,   40,  189,   41,  189,  189,   69,
      189,   67,  189,   68,  189,   27,   27,  193,   27,   28,
       22,   24,    7,    2,   21,    8,   18,   23,  151,  189,
      156,  189,  150,  189,  152,  189,  174,  189,  176,  189,
      177,  189,  173,  189,  175,  189,  153,  189,  133,  189,
      132,  189,  137,  189,  138,  189,  136,  189,  182,  189,
      169,  189,  171,  189,  168,  189,  170,  189,  189,  189,

      147,  189,  146,  189,  148,  189,  159,  189,  161,  189,
      162,  189,  158,  189,  160,  189,  189,   46,  189,   45,
      189,   35,  189,  189,  189,  189,  189,   29,  189,  188,
      189,   96,  189,   94,  189,   95,  189,  124,  102,  105,
        4,    6,    2,   16,   12,  178,  189,  155,  189,  154,
      189,  134,  189,  140,  189,  139,  189,  181,  189,  179,
      189,  164,  189,  166,  189,  163,  189,  165,  189,  189,
       85,  189,   87,  189,   89,  189,   86,  189,   88,  189,
       90,  189,    5,   17,   10,   14,   99,   97,   19,  141,
      189,  180,  189,   11,    9,   20,  101,  103,   13,   13,

       10
    } ;

static yyconst short int yy_accept[541] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
       11,   13,   14,   15,   16,   17,   19,   20,   21,   23,
       25,   26,   28,   30,   32,   34,   36,   38,   40,   42,
       44,   46,   48,   50,   52,   54,   56,   58,   59,   59,
       60,   60,   60,   60,   61,   62,   63,   63,   63,   63,
       63,   63,   63,   63,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   88,   90,   91,

       92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
      102,  103,  104,  105,  105,  105,  106,  108,  109,  110,
      111,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  122,  122,  122,  122,  122,  123,  123,
      123,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  125,  125,  126,
      127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
      137,  138,  139,  140,  141,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  152,  154,  157,  158,  159,  160,

      161,  163,  164,  166,  168,  170,  171,  172,  174,  175,
      176,  177,  178,  179,  180,  181,  182,  182,  183,  183,
      184,  185,  186,  188,  189,  190,  191,  192,  193,  194,
      194,  194,  194,  194,  194,  194,  194,  195,  195,  195,
      195,  195,  195,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  198,  200,  202,  204,  206,  208,
      210,  212,  214,  216,  218,  220,  222,  224,  226,  228,
      230,  232,  234,  236,  237,  239,  241,  243,  244,  246,
      248,  250,  252,  254,  255,  257,  259,  261,  263,  265,

      266,  268,  269,  270,  273,  275,  277,  279,  280,  282,
      284,  285,  287,  288,  290,  292,  294,  296,  298,  300,
      302,  304,  306,  307,  309,  311,  313,  315,  317,  319,
      321,  323,  325,  327,  329,  331,  333,  335,  337,  339,
      340,  342,  344,  346,  346,  347,  349,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      352,  353,  354,  355,  355,  355,  355,  355,  355,  356,
      356,  357,  358,  358,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  361,  363,  365,  367,  369,  371,  373,
      375,  377,  379,  381,  383,  385,  387,  389,  391,  393,

      395,  397,  399,  400,  401,  403,  405,  407,  409,  411,
      413,  415,  417,  418,  420,  422,  424,  425,  426,  427,
      428,  430,  432,  434,  436,  438,  439,  440,  440,  441,
      441,  441,  442,  443,  443,  443,  444,  445,  445,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  448,  450,  452,  454,  456,  458,  460,  462,
      464,  466,  468,  470,  471,  473,  475,  477,  479,  481,
      483,  483,  484,  484,  484,  484,  484,  485,  485,  485,
      486,  486,  487,  488,  489,  489,  490,  490,  492,  494,
      494,  494,  494,  495,  495,  495,  496,  496,  496,  496,

      496,  496,  496,  496,  496,  496,  496,  497,  497,  497,
      497,  497,  497,  498,  499,  500,  500,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  502,  502
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    7,
        8,    1,    9,   10,   11,   12,    1,   13,   14,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,    1,
        1,    1,    1,   17,   18,   19,   20,   18,   21,   22,
       18,   18,   23,   18,   18,   24,   25,   18,   18,   18,
       18,   18,   26,   18,   18,   18,   18,   27,   18,   18,
        1,   28,    1,    1,   29,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,   18,   40,   41,   42,
       43,   44,   18,   45,   46,   47,   48,   49,   50,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[54] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    3,    1,
        1,    4,    5,    5,    5,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5
    } ;

static yyconst short int yy_base[555] =
    {   0,
        0,    0,   52,   54,   56,   58,   60,   62,  912, 1701,
       64,   64,   92,   39,  904, 1701,   61,   97,   73, 1701,
       46,   70,  103,  140,  144,  184,  153,  159,  104,  180,
      176,  110,  190,  197,  206,  230,  237,   81,   86, 1701,
        0,  881,  110,  238,  242,  145,  124,  161,  208,  223,
      237,  203,  869,  264,  281,  858,  102,  846,  854,  842,
      833,  832,  821,  810,  129,  106,  822,  816,  839,  796,
      811,  828,  273,  291,  300,  301,  308,  312,  316,  320,
      324,  328,  335,  336,  342,  349,  350,  361,  365,  369,
      376,  386,  390,  394,  398,  402,  424,  435,  444,  418,

      445,  451,  452,  461,  468,  469,  477,  481,  488,  496,
      497,  507,  511,  175,  817,  284,  406,    0,  811,    0,
      516,  802,  106, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701,  761,  133,  755,   40,  183,  798,  512,  519,
      524,  537,  120,  768,  757,  742,  733,  732,  719,  723,
      719,  725,  243,  723,  723,  683,  689,  682,  686,  689,
      682,  687,  677,  678,  696,  547,  550,  553,  556,  565,
      566,  572,  576,  580,  586,  592,  601,  610,  622,  626,
      636,  637,  645,  651,  692,  652,  662,  668,  672,  679,
      688,  698,  704,  711,  719,  728,  734,  777,  741,  718,

      745,  729,  758,  778,  784,  785,  791,  792,  776,  793,
      806,  801,  809,  817,  849,  829,  863,  872,  652,  763,
      879, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,  886,
      645,  643,  642,  639,  348,  796,  821,  666,  893,  900,
      907,  651, 1701,  649,  641,  646,  639,  637,  620,  623,
      615,  620,  600,  606,  601,  590,  602,  580,  584,  893,
      593,  590,  587,  859,  920,  921,  928,  929,  935,  936,
      942,  943,  949,  950,  956,  957,  963,  964,  970,  971,
      977,  978, 1018,  985,  986,  956,  997,  998, 1004, 1022,
     1026, 1030, 1000, 1042, 1043, 1026, 1068, 1069, 1039, 1080,

     1084, 1088, 1092, 1096, 1100, 1104, 1108, 1115, 1122, 1126,
     1130, 1134, 1138, 1144, 1145, 1151, 1155, 1159, 1163, 1167,
     1174, 1175, 1182, 1183, 1189, 1190, 1196, 1197, 1203, 1204,
     1214, 1218, 1222, 1226, 1230, 1234, 1238, 1242, 1246, 1217,
     1252, 1253, 1259, 1046, 1054, 1259, 1263, 1266, 1274,  283,
      610, 1281, 1270, 1284, 1288, 1291, 1295, 1298,  572, 1701,
     1701, 1701,    0,  567,  556,  562,  553,  556, 1701,  549,
     1701, 1701,  556, 1701,  535,  267,  531,  529,  538,  510,
      523, 1285, 1312, 1313, 1320, 1321, 1327, 1328, 1334, 1335,
     1341, 1342, 1349, 1348, 1355, 1356, 1362, 1363, 1372, 1378,

     1385, 1386, 1392, 1396, 1400, 1404, 1408, 1412, 1416, 1386,
     1427, 1428, 1436, 1440, 1444, 1448, 1452, 1456, 1460, 1464,
     1470, 1474, 1478, 1482, 1486, 1701, 1701,  548, 1701, 1492,
     1498, 1701, 1701,  363, 1506,    0, 1701, 1520, 1701,  519,
      504,  504,  514,  509,  475,  463,  456,  451,  447,  443,
      453, 1518, 1519, 1525, 1526, 1532, 1533, 1539, 1540, 1546,
     1547, 1553, 1554, 1561, 1562, 1568, 1569, 1575, 1576, 1582,
      449, 1701,  414,  436, 1593, 1584, 1596, 1610,  230,  460,
      429, 1701, 1701, 1701,  426, 1701,  456, 1608, 1609, 1592,
      427,  310, 1701,    0,  416, 1701,  413, 1617,  394,  392,

      390,  389,  397,  376,  318,  381, 1701, 1620, 1628,  404,
      374,  359, 1701, 1701,    0,  386,    0,  379,  375,  372,
      351,  323,  325,  313,  326,  316,  264,  232,  228,  229,
      193,  189,  173,  161,  161,  149,  117, 1701, 1701, 1643,
     1648, 1653, 1656, 1659, 1664,   90, 1666, 1669, 1672, 1675,
     1680, 1685, 1690, 1695
    } ;

static yyconst short int yy_def[555] =
    {   0,
      539,    1,  540,  540,  540,  540,  540,  540,  539,  539,
      539,  541,  542,  539,  539,  539,  539,  539,  539,  539,
      539,  543,  543,  543,  543,  543,  543,  544,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  539,  541,  539,
      545,  539,  539,  546,  539,  547,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  548,  548,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  541,  539,  539,  546,  546,  546,  546,
      539,  547,  547,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  198,

      543,  198,  543,  543,  543,  543,  543,  543,  198,  198,
      549,  198,  198,  198,  543,  198,  539,  546,  539,  539,
      547,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  283,  543,  543,  543,  543,
      543,  543,  283,  543,  543,  283,  543,  543,  283,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  550,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  198,
      543,  543,  543,  539,  539,  546,  547,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  551,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  283,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  551,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      539,  539,  539,  539,  539,  539,  539,  539,  552,  539,
      539,  539,  539,  539,  539,  539,  539,  543,  543,  539,
      539,  552,  539,  553,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  539,  552,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  554,  539,  554,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,    0,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539
    } ;

static yyconst short int yy_nxt[1755] =
    {   0,
       10,   11,   11,   12,   13,   14,   15,   16,   17,   16,
       17,   18,   19,   19,   19,   20,   21,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   10,   22,   23,
       22,   24,   25,   22,   26,   22,   22,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   22,   22,   22,
       37,   22,   22,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   38,   38,   40,   47,   48,
       49,   50,   51,   54,   54,   54,   72,  226,   73,   69,
       70,   74,   38,   38,   52,   54,   54,   54,   71,   40,
      227,   41,   42,   42,  118,   42,   42,   42,   42,   42,

       43,   42,   43,   42,   44,   45,   45,   42,   42,   72,
       72,   73,   73,   41,   74,   74,   72,  121,   73,   42,
       55,   74,  116,  116,  116,  221,   56,   57,   58,   59,
      538,   60,   61,  115,   62,   76,   63,   99,  239,  158,
      240,   64,   65,   66,   77,   67,   72,  146,   73,   68,
       72,   74,   73,  147,  104,   74,  121,  159,  537,   72,
      124,   73,  155,  124,   74,   72,  156,   73,  123,   78,
       74,   75,   75,   75,  125,  157,  223,   82,   40,   79,
       80,   83,   72,  224,   73,   94,   72,   74,   73,   81,
       72,   74,   73,   95,   96,   74,   72,  126,   73,   98,

      126,   74,   41,   72,  127,   73,  536,  535,   74,  102,
      534,  128,   72,   84,   73,   85,   86,   74,  103,  533,
      228,   87,  100,   88,   89,   90,  229,  101,  532,   91,
      107,   92,  105,  493,   93,  108,   72,  106,   73,  109,
      127,   74,  110,   72,  129,   73,  127,  129,   74,  138,
      117,  117,  117,  111,  116,  116,  116,  494,  130,  131,
      127,  119,  131,  112,  120,  115,  133,  134,  135,  136,
       69,  531,  530,  132,  250,  529,   54,   54,   54,  113,
      528,  166,  137,  166,  251,  167,  167,  167,  120,  140,
      427,  140,  428,  141,  141,  141,  116,  116,  116,  168,

      142,  168,  143,  169,  169,  169,   72,   72,   73,   73,
      444,   74,   74,  493,   72,  144,   73,  443,   72,   74,
       73,  493,   72,   74,   73,  527,   72,   74,   73,  526,
       72,   74,   73,  170,   72,   74,   73,  494,  525,   74,
      171,   72,   72,   73,   73,  494,   74,   74,   72,  524,
       73,  172,  523,   74,  522,   72,   72,   73,   73,  176,
       74,   74,  173,  174,  473,  473,  178,   72,  179,   73,
      175,   72,   74,   73,  474,   72,   74,   73,  180,  182,
       74,  521,   72,  177,   73,  350,  181,   74,  520,  183,
      519,  351,   72,  185,   73,  184,   72,   74,   73,  518,

       72,   74,   73,  516,   72,   74,   73,  515,   72,   74,
       73,  514,  186,   74,  187,  473,  473,  190,  117,  117,
      117,  191,  188,  189,   72,  474,   73,  512,  511,   74,
       72,  192,   73,  194,  510,   74,   75,   75,   75,  510,
      510,   72,  510,   73,  510,  193,   74,   75,   75,   75,
       72,   72,   73,   73,  507,   74,   74,   72,   72,   73,
       73,  506,   74,   74,  504,  498,  198,   72,  497,   73,
      496,  495,   74,  197,   72,   72,   73,   73,  196,   74,
       74,  491,  490,   72,  199,   73,  200,   72,   74,   73,
      487,  203,   74,  487,   72,  201,   73,  487,  202,   74,

      204,  487,   72,   72,   73,   73,  487,   74,   74,  486,
      205,  206,  485,   72,  207,   73,  484,   72,   74,   73,
      209,  483,   74,  208,  219,  210,  219,  214,  220,  220,
      220,  141,  141,  141,  211,  212,  141,  141,  141,  482,
      213,  231,  232,  233,  234,  236,  481,  236,  480,  237,
      237,  237,  215,  471,  446,  216,  445,  235,  238,  167,
      167,  167,  167,  167,  167,  169,  169,  169,  169,  169,
      169,   72,   72,   73,   73,  443,   74,   74,   72,  443,
       73,  443,   72,   74,   73,  443,   72,   74,   73,  360,
      442,   74,   72,  441,   73,  264,  267,   74,   72,  440,

       73,  439,  438,   74,  265,  268,  437,   72,  271,   73,
      272,  270,   74,  435,  266,  269,   72,  429,   73,  273,
      382,   74,  276,  381,  380,  275,  374,  373,   72,  274,
       73,  277,   72,   74,   73,  372,  371,   74,  370,  369,
      279,  278,   72,   72,   73,   73,  368,   74,   74,  367,
      360,   72,  366,   73,  281,  280,   74,   72,   72,   73,
       73,  365,   74,   74,  220,  220,  220,  364,   72,  284,
       73,  282,  363,   74,   72,  362,   73,  285,   72,   74,
       73,  361,  360,   74,  283,   72,  359,   73,  352,  350,
       74,  293,  350,  350,   72,  350,   73,  286,   72,   74,

       73,  263,  299,   74,   72,  287,   73,  295,  294,   74,
       72,  296,   73,  297,  298,   74,  262,   72,  261,   73,
      260,  300,   74,  288,  301,   72,  259,   73,  258,  257,
       74,  289,  256,  255,   72,  254,   73,  290,  291,   74,
       72,  304,   73,  303,  292,   74,  302,   72,  316,   73,
      305,   72,   74,   73,  253,  252,   74,  317,  249,  319,
      306,  248,  247,   75,   72,  246,   73,  318,  320,   74,
       75,  314,  245,  307,   75,  220,  220,  220,  321,  244,
      315,   75,  308,   72,   72,   73,   73,  243,   74,   74,
       72,   72,   73,   73,  242,   74,   74,   72,   72,   73,

       73,  241,   74,   74,  230,  225,  324,  309,  237,  237,
      237,  222,   72,  121,   73,  325,  310,   74,   75,   75,
       75,   75,  311,  327,  322,  326,  312,  323,   75,  313,
      218,  331,  328,  237,  237,  237,  217,  165,   75,  334,
      332,  164,  329,  163,  162,   75,   75,  337,  335,  161,
      333,  160,  154,   75,   75,   72,  338,   73,  336,  341,
       74,   75,   75,  153,  152,   72,  339,   73,  342,   75,
       74,  344,  151,  344,   75,  345,  345,  345,  343,  150,
      344,   75,  344,  149,  346,  346,  346,  344,  148,  344,
      121,  347,  347,  347,  348,  340,  348,  145,  349,  349,

      349,  353,  139,  353,  115,  354,  354,  354,  355,   53,
      355,  539,  356,  356,  356,  357,  539,  357,  539,  358,
      358,  358,  375,  376,  377,  378,   72,   72,   73,   73,
      539,   74,   74,  539,   72,   72,   73,   73,  379,   74,
       74,   72,   72,   73,   73,  539,   74,   74,   72,   72,
       73,   73,  539,   74,   74,   72,   72,   73,   73,  539,
       74,   74,   72,   72,   73,   73,  539,   74,   74,   72,
       72,   73,   73,  539,   74,   74,   72,   72,   73,   73,
      539,   74,   74,   72,   72,   73,   73,  539,   74,   74,
      539,   72,   72,   73,   73,  395,   74,   74,  539,  396,

       75,  397,   75,   72,   72,   73,   73,  539,   74,   74,
       72,  539,   73,  539,  539,   74,  383,  392,  539,  539,
      384,  539,  385,  386,   72,  393,   73,  539,   72,   74,
       73,  394,   72,   74,   73,  539,   72,   74,   73,  399,
      539,   74,  539,  400,   75,  401,  402,  398,   72,   72,
       73,   73,  539,   74,   74,  539,  539,  387,  345,  345,
      345,  388,  389,  390,  391,  405,  345,  345,  345,   75,
       75,  406,  407,  403,   72,   72,   73,   73,  408,   74,
       74,  539,  409,  410,  411,  412,   72,  404,   73,  539,
       72,   74,   73,  539,   72,   74,   73,  539,   72,   74,

       73,  539,   72,   74,   73,  539,   72,   74,   73,  539,
       72,   74,   73,  539,   72,   74,   73,  539,  539,   74,
      413,   72,  539,   73,  539,  539,   74,  414,   72,  539,
       73,  415,   72,   74,   73,  539,   72,   74,   73,  539,
       72,   74,   73,  539,   72,   74,   73,  539,  416,   74,
       72,   72,   73,   73,  539,   74,   74,   72,  539,   73,
      417,   72,   74,   73,  539,   72,   74,   73,  419,   72,
       74,   73,  539,   72,   74,   73,  539,  539,   74,  418,
       72,   72,   73,   73,  539,   74,   74,  420,   72,   72,
       73,   73,  539,   74,   74,   72,   72,   73,   73,  539,

       74,   74,   72,   72,   73,   73,  539,   74,   74,   72,
       72,   73,   73,  539,   74,   74,   75,   75,   75,  539,
       72,  421,   73,  539,   72,   74,   73,  539,   72,   74,
       73,  539,   72,   74,   73,  539,   72,   74,   73,  539,
       72,   74,   73,  539,   72,   74,   73,  423,   72,   74,
       73,  539,   72,   74,   73,  539,  424,   74,   72,   72,
       73,   73,   75,   74,   74,   72,  425,   73,  539,   75,
       74,  346,  346,  346,  121,  347,  347,  347,  349,  349,
      349,  426,  354,  354,  354,  539,  349,  349,  349,  430,
      539,  430,  539,  431,  431,  431,  354,  354,  354,  432,

      356,  356,  356,  356,  356,  356,  433,  358,  358,  358,
      358,  358,  358,  434,  447,  448,  449,  450,   72,   72,
       73,   73,  539,   74,   74,  539,   72,   72,   73,   73,
      451,   74,   74,   72,   72,   73,   73,  539,   74,   74,
       72,   72,   73,   73,  539,   74,   74,   72,   72,   73,
       73,  539,   74,   74,   72,   72,   73,   73,  539,   74,
       74,   72,   72,   73,   73,  539,   74,   74,   72,   72,
       73,   73,  539,   74,   74,  539,  539,  452,   72,  539,
       73,  453,  539,   74,   72,  539,   73,  454,  455,   74,
      539,   72,   72,   73,   73,  456,   74,   74,   72,  539,

       73,  457,   72,   74,   73,  539,   72,   74,   73,  539,
       72,   74,   73,  539,   72,   74,   73,  539,   72,   74,
       73,  539,   72,   74,   73,  460,  539,   74,  539,  461,
       75,  462,  463,   72,   72,   73,   73,  539,   74,   74,
      539,  458,   72,  539,   73,  459,   72,   74,   73,  539,
       72,   74,   73,  539,   72,   74,   73,  539,   72,   74,
       73,  539,   72,   74,   73,  539,   72,   74,   73,  539,
       72,   74,   73,  539,  539,   74,   72,  539,   73,  464,
       72,   74,   73,  539,   72,   74,   73,  539,   72,   74,
       73,  465,   72,   74,   73,  467,  539,   74,  539,  468,

      539,  466,  539,  470,  431,  431,  431,  475,  475,  469,
      431,  431,  431,  472,  476,  539,  476,  539,  477,  477,
      477,  478,  478,  479,   72,   72,   73,   73,  539,   74,
       74,   72,   72,   73,   73,  539,   74,   74,   72,   72,
       73,   73,  539,   74,   74,   72,   72,   73,   73,  539,
       74,   74,   72,   72,   73,   73,  539,   74,   74,   72,
       72,   73,   73,  539,   74,   74,  539,   72,   72,   73,
       73,  488,   74,   74,   72,   72,   73,   73,  539,   74,
       74,   72,   72,   73,   73,  539,   74,   74,   72,  539,
       73,  539,  539,   74,  475,  475,  477,  477,  477,  539,

      539,  476,  539,  476,  489,  477,  477,  477,  477,  477,
      477,  478,  478,  479,   72,   72,   73,   73,  539,   74,
       74,  499,  500,  501,  502,  508,  539,  508,  539,  509,
      509,  509,  509,  509,  509,  513,  539,  503,  539,  539,
      509,  509,  509,   10,   10,   10,   10,   10,   39,   39,
       39,   39,   39,   46,  539,   46,   46,   46,   75,   75,
       75,   97,   97,   97,  114,  114,  114,  114,  114,  122,
      122,  195,  195,  195,  330,  330,  330,  422,  422,  422,
      436,  539,  436,  436,  436,  492,  492,  492,  492,  492,
      505,  505,  505,  505,  505,  517,  539,  517,  517,  517,

        9,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539
    } ;

static yyconst short int yy_chk[1755] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    5,    5,    6,
        6,    7,    7,    8,    8,   11,   11,   12,   14,   14,
       14,   14,   14,   17,   17,   17,   22,  136,   22,   19,
       21,   22,   38,   38,   14,   19,   19,   19,   21,   39,
      136,   12,   13,   13,  546,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   23,
       29,   23,   29,   39,   23,   29,   32,  123,   32,   13,
       18,   32,   43,   43,   43,  123,   18,   18,   18,   18,
      537,   18,   18,   43,   18,   23,   18,   29,  143,   66,
      143,   18,   18,   18,   23,   18,   24,   57,   24,   18,
       25,   24,   25,   57,   32,   25,   46,   66,  536,   27,
       47,   27,   65,   47,   27,   28,   65,   28,   46,   24,
       28,   28,   28,   28,   47,   65,  134,   25,  114,   24,
       24,   25,   31,  134,   31,   27,   30,   31,   30,   24,
       26,   30,   26,   27,   27,   26,   33,   48,   33,   28,

       48,   33,  114,   34,   48,   34,  535,  534,   34,   31,
      533,   48,   35,   26,   35,   26,   26,   35,   31,  532,
      137,   26,   30,   26,   26,   26,  137,   30,  531,   26,
       34,   26,   33,  479,   26,   35,   36,   33,   36,   35,
       52,   36,   35,   37,   49,   37,   52,   49,   37,   52,
       44,   44,   44,   35,   45,   45,   45,  479,   49,   50,
       50,   44,   50,   36,   44,   45,   51,   51,   51,   51,
       54,  530,  529,   50,  153,  528,   54,   54,   54,   37,
      527,   73,   51,   73,  153,   73,   73,   73,   44,   55,
      350,   55,  350,   55,   55,   55,  116,  116,  116,   74,

       55,   74,   55,   74,   74,   74,   75,   76,   75,   76,
      376,   75,   76,  492,   77,   55,   77,  376,   78,   77,
       78,  505,   79,   78,   79,  526,   80,   79,   80,  525,
       81,   80,   81,   76,   82,   81,   82,  492,  524,   82,
       77,   83,   84,   83,   84,  505,   83,   84,   85,  523,
       85,   78,  522,   85,  521,   86,   87,   86,   87,   82,
       86,   87,   79,   80,  434,  434,   84,   88,   84,   88,
       81,   89,   88,   89,  434,   90,   89,   90,   85,   87,
       90,  520,   91,   83,   91,  235,   86,   91,  519,   87,
      518,  235,   92,   88,   92,   87,   93,   92,   93,  516,

       94,   93,   94,  512,   95,   94,   95,  511,   96,   95,
       96,  510,   89,   96,   90,  473,  473,   92,  117,  117,
      117,   93,   91,   91,  100,  473,  100,  506,  504,  100,
       97,   94,   97,   96,  503,   97,   97,   97,   97,  502,
      501,   98,  500,   98,  499,   95,   98,   98,   98,   98,
       99,  101,   99,  101,  497,   99,  101,  102,  103,  102,
      103,  495,  102,  103,  491,  487,  100,  104,  485,  104,
      481,  480,  104,   99,  105,  106,  105,  106,   98,  105,
      106,  474,  471,  107,  101,  107,  102,  108,  107,  108,
      451,  104,  108,  450,  109,  103,  109,  449,  103,  109,

      104,  448,  110,  111,  110,  111,  447,  110,  111,  446,
      104,  105,  445,  112,  106,  112,  444,  113,  112,  113,
      108,  443,  113,  107,  121,  108,  121,  111,  121,  121,
      121,  140,  140,  140,  109,  110,  141,  141,  141,  442,
      110,  139,  139,  139,  139,  142,  441,  142,  440,  142,
      142,  142,  112,  428,  381,  113,  380,  139,  142,  166,
      166,  166,  167,  167,  167,  168,  168,  168,  169,  169,
      169,  170,  171,  170,  171,  379,  170,  171,  172,  378,
      172,  377,  173,  172,  173,  375,  174,  173,  174,  373,
      370,  174,  175,  368,  175,  170,  171,  175,  176,  367,

      176,  366,  365,  176,  170,  171,  364,  177,  173,  177,
      174,  172,  177,  359,  170,  171,  178,  351,  178,  174,
      263,  178,  176,  262,  261,  175,  259,  258,  179,  174,
      179,  176,  180,  179,  180,  257,  256,  180,  255,  254,
      177,  176,  181,  182,  181,  182,  253,  181,  182,  252,
      251,  183,  250,  183,  179,  178,  183,  184,  186,  184,
      186,  249,  184,  186,  219,  219,  219,  248,  187,  182,
      187,  180,  247,  187,  188,  246,  188,  183,  189,  188,
      189,  245,  244,  189,  181,  190,  242,  190,  238,  234,
      190,  186,  233,  232,  191,  231,  191,  184,  185,  191,

      185,  165,  189,  185,  192,  185,  192,  188,  187,  192,
      193,  188,  193,  188,  188,  193,  164,  194,  163,  194,
      162,  190,  194,  185,  191,  195,  161,  195,  160,  159,
      195,  185,  158,  157,  196,  156,  196,  185,  185,  196,
      197,  194,  197,  193,  185,  197,  192,  199,  200,  199,
      194,  201,  199,  201,  155,  154,  201,  200,  152,  202,
      194,  151,  150,  200,  203,  149,  203,  200,  202,  203,
      200,  199,  148,  197,  202,  220,  220,  220,  202,  147,
      199,  202,  197,  198,  204,  198,  204,  146,  198,  204,
      205,  206,  205,  206,  145,  205,  206,  207,  208,  207,

      208,  144,  207,  208,  138,  135,  209,  198,  236,  236,
      236,  133,  211,  122,  211,  209,  198,  211,  211,  211,
      211,  209,  198,  210,  206,  209,  198,  207,  209,  198,
      119,  212,  210,  237,  237,  237,  115,   72,  210,  213,
      212,   71,  210,   70,   69,  210,  212,  214,  213,   68,
      212,   67,   64,  212,  213,  215,  214,  215,  213,  216,
      215,  213,  214,   63,   62,  264,  214,  264,  216,  214,
      264,  217,   61,  217,  216,  217,  217,  217,  216,   60,
      218,  216,  218,   59,  218,  218,  218,  221,   58,  221,
      221,  221,  221,  221,  230,  215,  230,   56,  230,  230,

      230,  239,   53,  239,   42,  239,  239,  239,  240,   15,
      240,    9,  240,  240,  240,  241,    0,  241,    0,  241,
      241,  241,  260,  260,  260,  260,  265,  266,  265,  266,
        0,  265,  266,    0,  267,  268,  267,  268,  260,  267,
      268,  269,  270,  269,  270,    0,  269,  270,  271,  272,
      271,  272,    0,  271,  272,  273,  274,  273,  274,    0,
      273,  274,  275,  276,  275,  276,    0,  275,  276,  277,
      278,  277,  278,    0,  277,  278,  279,  280,  279,  280,
        0,  279,  280,  281,  282,  281,  282,    0,  281,  282,
        0,  284,  285,  284,  285,  286,  284,  285,    0,  286,

      286,  286,  286,  287,  288,  287,  288,    0,  287,  288,
      289,    0,  289,    0,    0,  289,  281,  284,    0,    0,
      281,    0,  281,  281,  283,  285,  283,    0,  290,  283,
      290,  285,  291,  290,  291,    0,  292,  291,  292,  293,
        0,  292,    0,  293,  293,  293,  293,  288,  294,  295,
      294,  295,    0,  294,  295,    0,    0,  283,  344,  344,
      344,  283,  283,  283,  283,  296,  345,  345,  345,  296,
      296,  296,  296,  294,  297,  298,  297,  298,  299,  297,
      298,    0,  299,  299,  299,  299,  300,  294,  300,    0,
      301,  300,  301,    0,  302,  301,  302,    0,  303,  302,

      303,    0,  304,  303,  304,    0,  305,  304,  305,    0,
      306,  305,  306,    0,  307,  306,  307,    0,    0,  307,
      300,  308,    0,  308,    0,    0,  308,  302,  309,    0,
      309,  303,  310,  309,  310,    0,  311,  310,  311,    0,
      312,  311,  312,    0,  313,  312,  313,    0,  308,  313,
      314,  315,  314,  315,    0,  314,  315,  316,    0,  316,
      311,  317,  316,  317,    0,  318,  317,  318,  313,  319,
      318,  319,    0,  320,  319,  320,    0,    0,  320,  311,
      321,  322,  321,  322,    0,  321,  322,  313,  323,  324,
      323,  324,    0,  323,  324,  325,  326,  325,  326,    0,

      325,  326,  327,  328,  327,  328,    0,  327,  328,  329,
      330,  329,  330,    0,  329,  330,  330,  330,  330,    0,
      331,  323,  331,    0,  332,  331,  332,    0,  333,  332,
      333,    0,  334,  333,  334,    0,  335,  334,  335,    0,
      336,  335,  336,    0,  337,  336,  337,  340,  338,  337,
      338,    0,  339,  338,  339,    0,  340,  339,  341,  342,
      341,  342,  340,  341,  342,  343,  340,  343,    0,  340,
      343,  346,  346,  346,  347,  347,  347,  347,  348,  348,
      348,  349,  353,  353,  353,    0,  349,  349,  349,  352,
        0,  352,    0,  352,  352,  352,  354,  354,  354,  354,

      355,  355,  355,  356,  356,  356,  356,  357,  357,  357,
      358,  358,  358,  358,  382,  382,  382,  382,  383,  384,
      383,  384,    0,  383,  384,    0,  385,  386,  385,  386,
      382,  385,  386,  387,  388,  387,  388,    0,  387,  388,
      389,  390,  389,  390,    0,  389,  390,  391,  392,  391,
      392,    0,  391,  392,  394,  393,  394,  393,    0,  394,
      393,  395,  396,  395,  396,    0,  395,  396,  397,  398,
      397,  398,    0,  397,  398,    0,    0,  389,  399,    0,
      399,  392,    0,  399,  400,    0,  400,  392,  393,  400,
        0,  401,  402,  401,  402,  396,  401,  402,  403,    0,

      403,  396,  404,  403,  404,    0,  405,  404,  405,    0,
      406,  405,  406,    0,  407,  406,  407,    0,  408,  407,
      408,    0,  409,  408,  409,  410,    0,  409,    0,  410,
      410,  410,  410,  411,  412,  411,  412,    0,  411,  412,
        0,  403,  413,    0,  413,  404,  414,  413,  414,    0,
      415,  414,  415,    0,  416,  415,  416,    0,  417,  416,
      417,    0,  418,  417,  418,    0,  419,  418,  419,    0,
      420,  419,  420,    0,    0,  420,  421,    0,  421,  413,
      422,  421,  422,    0,  423,  422,  423,    0,  424,  423,
      424,  417,  425,  424,  425,  418,    0,  425,    0,  419,

        0,  417,    0,  420,  430,  430,  430,  435,  435,  419,
      431,  431,  431,  431,  435,    0,  435,    0,  435,  435,
      435,  438,  438,  438,  452,  453,  452,  453,    0,  452,
      453,  454,  455,  454,  455,    0,  454,  455,  456,  457,
      456,  457,    0,  456,  457,  458,  459,  458,  459,    0,
      458,  459,  460,  461,  460,  461,    0,  460,  461,  462,
      463,  462,  463,    0,  462,  463,    0,  464,  465,  464,
      465,  456,  464,  465,  466,  467,  466,  467,    0,  466,
      467,  468,  469,  468,  469,    0,  468,  469,  470,    0,
      470,    0,    0,  470,  475,  475,  476,  476,  476,    0,

        0,  475,    0,  475,  464,  475,  475,  475,  477,  477,
      477,  478,  478,  478,  488,  489,  488,  489,    0,  488,
      489,  490,  490,  490,  490,  498,    0,  498,    0,  498,
      498,  498,  508,  508,  508,  509,    0,  490,    0,    0,
      509,  509,  509,  540,  540,  540,  540,  540,  541,  541,
      541,  541,  541,  542,    0,  542,  542,  542,  543,  543,
      543,  544,  544,  544,  545,  545,  545,  545,  545,  547,
      547,  548,  548,  548,  549,  549,  549,  550,  550,  550,
      551,    0,  551,  551,  551,  552,  552,  552,  552,  552,
      553,  553,  553,  553,  553,  554,    0,  554,  554,  554,

      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() (yy_more_offset = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	yy_more_offset = yy_prev_more_offset; \
	yyleng -= yy_more_offset; \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "start.l"
#define INITIAL 0
#line 2 "start.l"
#include"relipmoC.h"
#include"yacc.cpp.h"
extern StringTab curStringTab; 
extern SymTab curSymTab;
extern ActRecord *curActRecord;
extern SYMTYPE opcode;
extern Array tempArray;
static string staticName;
extern bool CPP;
#define SEENARRAY 1

#define FUNCTIONEND 2

#define IS_STATIC_LOCAL 3

#line 1033 "lex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 26 "start.l"

 string temp;

#line 1188 "lex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 540 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1701 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 29 "start.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 31 "start.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 32 "start.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 33 "start.l"

	YY_BREAK
case 5:
YY_RULE_SETUP
#line 34 "start.l"

	YY_BREAK
case 6:
YY_RULE_SETUP
#line 35 "start.l"

	YY_BREAK
case 7:
YY_RULE_SETUP
#line 37 "start.l"
{ /*data section starts; contains declarations of global vars*/}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 39 "start.l"
{/*code section starts */ }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 41 "start.l"

	YY_BREAK
case 10:
YY_RULE_SETUP
#line 43 "start.l"
//{ cout << yytext << "check asm file";}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "start.l"

	YY_BREAK
case 12:
YY_RULE_SETUP
#line 47 "start.l"
{
					return LOCAL;
					//"IDENTIFIER" is "static"
				}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 52 "start.l"
return FUNCEND;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 54 "start.l"
return STRSECTION;     
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 56 "start.l"
{ 
				strcpy( yylval.name, yytext );
				return STR;			
			      }	
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "start.l"
/* "IDENTIFIER" is global */ return GLOBAL;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 63 "start.l"
//swallow align statement
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 65 "start.l"
return TYPE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 67 "start.l"
return OBJECT;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "start.l"
return FUNCTION;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "start.l"
return SIZE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 73 "start.l"
{
					strcpy( yylval.name, yytext + 1 );
					return DTYPE;
				}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 78 "start.l"
{if ( CPP != true ) {
				cerr << ".zero encountered\nsee start.l";
					abort();}
					//return ZERO;
					strcpy( yylval.name, "long" );
					return DTYPE;
				}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "start.l"
return COMM;	
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 88 "start.l"
return ':';//indicates a label
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 90 "start.l"
{
					yylval.num = atoi( yytext + 1 );
					return NUM;
				}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "start.l"
{
				//a string label found, return its value i.e.,
				//its corresponding string
				StringTab::Index t = atoi( yytext + 4 );
				strcpy( yylval.name, curStringTab[ t ].c_str());
				return STR;
			      }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "start.l"
{
				/*$Identifier means the address of the 
				  identifier. change return value from NAME to
				  something that indicates this */
					strcpy( yylval.name, yytext + 1 );
					return ADDRESSNAME;
			      }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 111 "start.l"
return PUSHL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 112 "start.l"
return POPL;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 114 "start.l"
return CALL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 116 "start.l"

	YY_BREAK
case 33:
YY_RULE_SETUP
#line 117 "start.l"

	YY_BREAK
case 34:
YY_RULE_SETUP
#line 118 "start.l"

	YY_BREAK
case 35:
YY_RULE_SETUP
#line 119 "start.l"

	YY_BREAK
case 36:
YY_RULE_SETUP
#line 120 "start.l"

	YY_BREAK
case 37:
YY_RULE_SETUP
#line 122 "start.l"
{
					strcpy( yylval.name, "+" );
					opcode = LONG;
					return OPCODE;
				}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 128 "start.l"
{
					strcpy( yylval.name, "+" );
					opcode = SINT;
					return OPCODE;
				}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 134 "start.l"
{
					strcpy( yylval.name, "+" );
					opcode = CHAR;
					return OPCODE;
				}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 140 "start.l"
{
					strcpy( yylval.name, "-" );
					opcode = LONG;
					return OPCODE;
				}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 146 "start.l"
{
					strcpy( yylval.name, "-" );
					opcode = SINT;
					return OPCODE;
				}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 152 "start.l"
{
					strcpy( yylval.name, "-" );
					opcode = CHAR;
					return OPCODE;
				}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 158 "start.l"
return MULL;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 159 "start.l"
return MULB;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 160 "start.l"
return IMULL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 161 "start.l"
return IDIVL; 
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 162 "start.l"
return DIVL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 164 "start.l"
{	
					yylval.type = LONG;
					return INC;
				}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 168 "start.l"
{	
					yylval.type = SINT;
					return INC;
				}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 172 "start.l"
{	
					yylval.type = CHAR;
					return INC;
				}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 177 "start.l"
{	
					yylval.type = CHAR;
					return INC;
				}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 181 "start.l"
{
					yylval.type = LONG;
					return DEC;
				}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 185 "start.l"
{
					yylval.type = SINT;
					return DEC;
				}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 189 "start.l"
{
					yylval.type = CHAR;
					return DEC;
				}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 194 "start.l"
{
					yylval.type = LONG;
					return NEG;
				}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 198 "start.l"
{
					yylval.type = SINT;
					return NEG;
				}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 202 "start.l"
{
					yylval.type = CHAR;
					return NEG;
				}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 207 "start.l"
{
					yylval.type = LONG;
					return NOT;
				}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 212 "start.l"
{
					yylval.type = SINT;
					return NOT;
				}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 217 "start.l"
{
					yylval.type = CHAR;
					return NOT;
				}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 222 "start.l"
{
					strcpy( yylval.name, "&" );
					opcode = LONG;
					return OPCODE;
				}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 227 "start.l"
{
					strcpy( yylval.name, "&" );
					opcode = SINT;
					return OPCODE;
				}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 233 "start.l"
{
					strcpy( yylval.name, "&" );
					opcode = CHAR;
					return OPCODE;
				}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 239 "start.l"
{
					strcpy( yylval.name, "|" );
					opcode = LONG;
					return OPCODE;
				}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 245 "start.l"
{
					strcpy( yylval.name, "|" );
					opcode = SINT;
					return OPCODE;
				}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 251 "start.l"
{
					strcpy( yylval.name, "|" );
					opcode = CHAR;
					return OPCODE;
				}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 257 "start.l"
{
					strcpy( yylval.name, "^" );
					opcode = LONG;
					return OPCODE;
				}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 262 "start.l"
{
					strcpy( yylval.name, "^" );
					opcode = SINT;
					return OPCODE;
				}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 267 "start.l"
{
					strcpy( yylval.name, "^" );
					opcode = CHAR;
					return OPCODE;
				}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 273 "start.l"
{
					strcpy( yylval.name, "<<" );
					opcode = LONG;
					return OPCODE;
				}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 279 "start.l"
{
					strcpy( yylval.name, "<<" );
					opcode = SINT;
					return OPCODE;
				}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 285 "start.l"
{
					strcpy( yylval.name, "<<" );
					opcode = CHAR;
					return OPCODE;
				}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 292 "start.l"
{
					strcpy( yylval.name, "<<" );
					opcode = LONG;
					return OPCODE;
				}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 297 "start.l"
{
					strcpy( yylval.name, "<<" );
					opcode = SINT;
					return OPCODE;
				}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 302 "start.l"
{
					strcpy( yylval.name, "<<" );
					opcode = CHAR;
					return OPCODE;
				}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 309 "start.l"
{
					strcpy( yylval.name, ">>" );
					opcode = LONG;
					return OPCODE;
				}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 315 "start.l"
{
					strcpy( yylval.name, ">>" );
					opcode = SINT;
					return OPCODE;
				}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 321 "start.l"
{
					strcpy( yylval.name, ">>" );
					opcode = CHAR;
					return OPCODE;
				}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 328 "start.l"
{
					strcpy( yylval.name, ">>" );
					opcode = LONG;
					return OPCODE;
				}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 333 "start.l"
{
					strcpy( yylval.name, ">>" );
					opcode = SINT;
					return OPCODE;
				}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 338 "start.l"
{
					strcpy( yylval.name, ">>" );
					opcode = CHAR;
					return OPCODE;
				}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 346 "start.l"
{
					yylval.type = LONG;
					return MOV;
				}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 351 "start.l"
{
					yylval.type = SINT;
					return MOV;
				}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 356 "start.l"
{
					yylval.type = CHAR;
					return MOV;
				}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 361 "start.l"
{
					yylval.type = SIGNED;
					return MOVBL;
				}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 365 "start.l"
{
					yylval.type = UNSIGNED;
					return MOVBL;
				}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 372 "start.l"
{
					yylval.type = SIGNED;
					return MOVBW;
				}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 376 "start.l"
{
					yylval.type = UNSIGNED;
					return MOVBW;
				}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 382 "start.l"
{
					yylval.type = SIGNED;
					return MOVWL;
				}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 386 "start.l"
{
					yylval.type = UNSIGNED;
					return MOVWL;
				}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 392 "start.l"
{
					yylval.type = LONG;
					return CMP;
				}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 396 "start.l"
{
					yylval.type = SINT;
					return CMP;
				}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 400 "start.l"
{
					yylval.type = CHAR;
					return CMP;
				}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 404 "start.l"
{
					yylval.type = LONG;
					return TEST;
				}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 408 "start.l"
{
					yylval.type = SINT;
					return TEST;
				}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 412 "start.l"
{
					yylval.type = CHAR;
					return TEST;
				}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 417 "start.l"
{
				yylval.num = 
				atoi( string( yytext , yytext + yyleng - 6 ) );
				return STACKVAR;
			}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 423 "start.l"
return LEAL;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 425 "start.l"
{
					temp.assign( yytext,
							yytext + yyleng - 6 );
					yylval.num = atoi( temp );
					yyless( temp.size( ) );
					return NUM;
				}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 434 "start.l"
{
					temp.assign( yytext );
					int x = temp.find( "+" );
					temp.assign( yytext, yytext + x );
					strcpy( yylval.name, temp.c_str( ) );
					yyless( x + 1 );
					return ARRAYNAME;
				}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 444 "start.l"
{

				temp.assign( yytext );
				int x = temp.find( "(" );
				tempArray.name.assign( yytext, yytext + x );
				strcpy( yylval.name, tempArray.name.c_str( ) );
				int y = temp.find_last_of( "," );
				tempArray.regs.assign( yytext + x + 2,
								 yytext + y );
				tempArray.size = atoi( 	string( yytext + y + 1,
							yytext + yyleng - 1
							) );
				return ARRAYNAME;	
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 460 "start.l"
{
					temp.assign( yytext + 1,
							yytext + yyleng - 1 );
					strcpy( yylval.name, temp.c_str( ) );
					return POINTER;
				}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 468 "start.l"
{
					temp.assign( yytext + 1, yytext + 5 );
					temp += string( yytext + 6, yytext + 10 );
					strcpy( yylval.name, temp.c_str( ) );
					return SUM;
				}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 475 "start.l"
return ESP;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 477 "start.l"
return PTRESP;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 479 "start.l"
return EBP;
	YY_BREAK
case 107:
#line 483 "start.l"
case 108:
#line 484 "start.l"
case 109:
#line 485 "start.l"
case 110:
#line 486 "start.l"
case 111:
#line 487 "start.l"
case 112:
#line 488 "start.l"
case 113:
YY_RULE_SETUP
#line 488 "start.l"
{ 
					strcpy( yylval.name, yytext );
					return REGS;	
				}
	YY_BREAK
case 114:
#line 494 "start.l"
case 115:
#line 495 "start.l"
case 116:
#line 496 "start.l"
case 117:
YY_RULE_SETUP
#line 496 "start.l"
{	
					char reg[] ={'%', 'e', ' ', 'x', '\0' };
					reg[ 2 ] = yytext[ 1 ];
					strcpy( yylval.name, reg );
					return REGS;
				}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 503 "start.l"
{
					cout << "Index registers used\n";
					abort( );
				}
	YY_BREAK
case 119:
#line 508 "start.l"
case 120:
#line 509 "start.l"
case 121:
#line 510 "start.l"
case 122:
YY_RULE_SETUP
#line 510 "start.l"
{
					char reg[] ={'%', 'e', ' ', 'x', '\0' };
					reg[ 2 ] = yytext[ 1 ];
					strcpy( yylval.name, reg );
					return REGS;
				}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 517 "start.l"
{
					yylval.num = 0;
					return FLOATREG;
				}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 522 "start.l"
{
					temp.assign( yytext + 4,
							yytext + yyleng - 1 );
					yylval.num = atoi( temp );
					return FLOATREG;
				}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 529 "start.l"
return FLD1;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 530 "start.l"
return FLDZ;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 532 "start.l"
{
					yylval.type = FLOAT;
					return FLD;
				}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 536 "start.l"
{
					yylval.type = FLOAT;
					return FLD;
				}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 540 "start.l"
{
					yylval.type = DOUBLE;
					return FLD;
				}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 544 "start.l"
{
					yylval.type = LDOUBLE;
					return FLD;
				}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 549 "start.l"
{
					yylval.type = LONG;
					return FILD;
				}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 553 "start.l"
{
					yylval.type = SINT;
					return FILD;
				}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 557 "start.l"
{
					yylval.type = LONG;
					return FILD;
				}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 562 "start.l"
return FILD;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 564 "start.l"
{
					yylval.type = LONG;
					return FIST;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 568 "start.l"
{
					yylval.type = SINT;
					return FIST;
				}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 572 "start.l"
{
					yylval.type = LONG;
					return FIST;
				}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 577 "start.l"
{
					yylval.type = LONG;
					return FISTP;
				}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 581 "start.l"
{
					yylval.type = SINT;
					return FISTP;
				}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 585 "start.l"
{
					yylval.type = LONG;
					return FISTP;
				}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 590 "start.l"
return FISTPLL;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 592 "start.l"
{
					yylval.type = FLOAT;
					return FST;
				}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 596 "start.l"
{
					yylval.type = DOUBLE;
					return FST;
				}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 600 "start.l"
{
					yylval.type = LDOUBLE;
					return FST;
				}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 605 "start.l"
{
					yylval.type = FLOAT;
					return FSTP;
				}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 610 "start.l"
{
					yylval.type = FLOAT;
					return FSTP;
				}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 614 "start.l"
{
					yylval.type = DOUBLE;
					return FSTP;
				}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 618 "start.l"
{
					yylval.type = LDOUBLE;
					return FSTP;
				}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 623 "start.l"
{
					yylval.type = FLOAT;
					return FADD;
				}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 627 "start.l"
{
					yylval.type = FLOAT;
					return FADD;
				}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 631 "start.l"
{
					yylval.type = DOUBLE;
					return FADD;
				}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 635 "start.l"
{
					yylval.type = LDOUBLE;
					return FADD;
				}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 640 "start.l"
{
					yylval.type = LONG;
					return FIADD;
				}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 644 "start.l"
{
					yylval.type = SINT;
					return FIADD;
				}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 649 "start.l"
{
					yylval.type = LONG;
					return FIADD;
				}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 654 "start.l"
return FADDP;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 656 "start.l"
{
					yylval.type = FLOAT;
					return FSUB;
				}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 660 "start.l"
{
					yylval.type = FLOAT;
					return FSUB;
				}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 664 "start.l"
{
					yylval.type = DOUBLE;
					return FSUB;
				}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 668 "start.l"
{
					yylval.type = LDOUBLE;
					return FSUB;
				}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 673 "start.l"
return FSUBP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 675 "start.l"
{
					yylval.type = FLOAT;
					return FSUBR;
				}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 680 "start.l"
{
					yylval.type = FLOAT;
					return FSUBR;
				}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 684 "start.l"
{
					yylval.type = DOUBLE;
					return FSUBR;
				}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 688 "start.l"
{
					yylval.type = LDOUBLE;
					return FSUBR;
				}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 693 "start.l"
return FSUBRP;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 695 "start.l"
{
					yylval.type = FLOAT;
					return FMUL;
				}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 700 "start.l"
{
					yylval.type = FLOAT;
					return FMUL;
				}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 704 "start.l"
{
					yylval.type = DOUBLE;
					return FMUL;
				}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 708 "start.l"
{
					yylval.type = LDOUBLE;
					return FMUL;
				}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 713 "start.l"
return FMULP;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 715 "start.l"
{
					yylval.type = FLOAT;
					return FDIV;
				}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 720 "start.l"
{
					yylval.type = FLOAT;
					return FDIVS;
				}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 724 "start.l"
{
					yylval.type = DOUBLE;
					return FDIVS;
				}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 728 "start.l"
{
					yylval.type = LDOUBLE;
					return FDIVS;
				}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 733 "start.l"
return FDIVP;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 735 "start.l"
return FDIVR;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 737 "start.l"
return FDIVRP;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 739 "start.l"
return FNSTSW;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 740 "start.l"
return FUCOMPP;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 741 "start.l"
return FNSTCW;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 742 "start.l"
return FLDCW;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 744 "start.l"
return FABS;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 745 "start.l"
return FCHS;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 746 "start.l"
return FXCH;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 748 "start.l"
return JMP;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 750 "start.l"
strcpy( yylval.name, yytext );return CJMP;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 752 "start.l"
strcpy( yylval.name, yytext ); return CSET;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 754 "start.l"
{
					strcpy ( yylval.name, yytext );
					return NAME;
				}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 759 "start.l"
{ 
					//a string label
					yylval.num = atoi( yytext + 3 );
					return STRINGLABEL;
			    	}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 765 "start.l"
{ 
					//a loop label
			      		yylval.num = atoi(yytext + 2);
			      		return LABEL;
 			    	}			
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 771 "start.l"
{
					yylval.num = atoi(yytext);
					return NUM; 
				}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 776 "start.l"
{
					strcpy( yylval.name, yytext );
					return HEXNUM;
				}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 780 "start.l"

	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SEENARRAY):
case YY_STATE_EOF(FUNCTIONEND):
case YY_STATE_EOF(IS_STATIC_LOCAL):
#line 781 "start.l"
return END;//end of file
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 783 "start.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2657 "lex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 540 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 540 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 539);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 783 "start.l"


int yywrap( void )
{
	return 1;
}

